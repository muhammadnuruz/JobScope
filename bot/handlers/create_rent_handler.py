from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
import requests

from bot.buttons.reply_buttons import main_menu_buttons, back_main_menu_button
from bot.buttons.text import create_debt
from bot.dispatcher import dp
from aiogram.dispatcher.filters import Text

DEBT_CREATE_API = "http://127.0.0.1:8005/api/debts/create/"


@dp.message_handler(Text(equals=create_debt))
async def start_debt_creation(msg: types.Message, state: FSMContext):
    await msg.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è:", reply_markup=await back_main_menu_button())
    await state.set_state("debt_borrower_name")


@dp.message_handler(state="debt_borrower_name")
async def get_borrower_name(msg: types.Message, state: FSMContext):
    await state.update_data(borrower_name=msg.text)
    await msg.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150000):")
    await state.set_state("debt_amount")


@dp.message_handler(state="debt_amount")
async def get_amount(msg: types.Message, state: FSMContext):
    try:
        amount = int(msg.text)
        await state.update_data(amount=amount)
    except ValueError:
        await msg.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return
    await msg.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01-08-2025):")
    await state.set_state("debt_deadline")


import locale

locale.setlocale(locale.LC_ALL, '')


@dp.message_handler(state="debt_deadline")
async def get_deadline(msg: types.Message, state: FSMContext):
    await state.update_data(deadline=msg.text)
    data = await state.get_data()

    try:
        deadline_date = datetime.strptime(data["deadline"], "%d-%m-%Y").date()
        today = datetime.today().date()
        remaining_days = (deadline_date - today).days

        if remaining_days <= 0:
            await msg.answer("‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º.")
            return

        price_per_day = int(data["amount"] / remaining_days)

        formatted_deadline = deadline_date.strftime("%Y-%m-%d")

    except Exception:
        await msg.answer("‚ùå –î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –§–æ—Ä–º–∞—Ç: –î–î-–ú–ú-–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01-08-2025).")
        return

    payload = {
        "borrower_name": data["borrower_name"],
        "amount": data["amount"],
        "deadline": formatted_deadline,
        "chat_id": msg.from_user.id,
        "price": price_per_day
    }

    response = requests.post(
        DEBT_CREATE_API,
        json=payload,
    )

    if response.status_code in [200, 201]:
        await msg.answer("‚úÖ –î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=await main_menu_buttons(msg.from_user.id))
    else:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞.", reply_markup=await main_menu_buttons(msg.from_user.id))
    await state.finish()
