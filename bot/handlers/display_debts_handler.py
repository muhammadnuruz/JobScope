import html
from datetime import datetime

from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import types
import requests

from bot.buttons.text import display_debts
from bot.dispatcher import dp

DEBT_LIST_API = "http://127.0.0.1:8005/api/debts/"
DEBT_DELETE_API = "http://127.0.0.1:8005/api/debts/delete/"


@dp.message_handler(Text(equals=display_debts))
async def show_user_debts(msg: types.Message):
    response = requests.get(DEBT_LIST_API, params={"chat_id": msg.from_user.id})

    if response.status_code != 200:
        await msg.answer("‚ùå –î–æ–ª–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    debts = response.json()
    results = debts.get('results', [])
    if debts.get('count', 0) == 0 or not results:
        await msg.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤.")
        return

    total_sum = sum(debt.get("amount", 0) for debt in results)
    formatted_total_sum = f"{total_sum:,}".replace(",", " ")
    formatted_total_price = f"{sum(int(d.get('price', 0)) for d in results):,}".replace(",", " ")

    debt_lines = []
    for debt in results:
        borrower_name = html.escape(debt['borrower_name'])
        formatted_amount = f"{int(debt.get('amount', 0)):,}".replace(",", " ")
        debt_lines.append(f"üë§ {borrower_name} ‚Äî {formatted_amount} —Å—É–º")

    debt_text = "\n".join(debt_lines)

    intro_text = (
        f"üìÑ –í—Å–µ–≥–æ –¥–æ–ª–≥–æ–≤: <b>{len(results)}</b>\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: <b>{formatted_total_sum} —Å—É–º</b>\n"
        f"üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂: <b>{formatted_total_price} —Å—É–º</b>\n"
        f"<b>–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤:</b>\n"
        f"{debt_text}"
    )
    await msg.answer(intro_text, parse_mode="HTML")

    for debt in results:
        try:
            deadline_date = datetime.strptime(debt['deadline'], "%Y-%m-%d")
            formatted_deadline = deadline_date.strftime("%d-%m-%Y")
        except Exception:
            formatted_deadline = debt['deadline']

        borrower_name = html.escape(debt['borrower_name'])

        formatted_amount = f"{int(debt['amount']):,}".replace(",", " ")
        formatted_price = f"{int(debt['price']):,}".replace(",", " ")

        text = (
            f"üë§ <b>{borrower_name}</b> ‚Äî <b>{formatted_amount} —Å—É–º</b>\n"
            f"üìÖ –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: <b>{formatted_deadline}</b>\n"
            f"üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂: <b>{formatted_price} —Å—É–º</b>"
        )

        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_debt_{debt['id']}")
        )

        await msg.answer(text, reply_markup=keyboard, parse_mode="HTML")


@dp.callback_query_handler(lambda c: c.data.startswith("delete_debt_"))
async def delete_debt_handler(callback_query: types.CallbackQuery):
    debt_id = callback_query.data.split("_")[-1]
    response = requests.delete(f"{DEBT_DELETE_API}{debt_id}/")
    if response.status_code == 204:
        await callback_query.message.edit_text("‚úÖ –î–æ–ª–≥ —É–¥–∞–ª—ë–Ω.")
    else:
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–ª–≥.")
